service: aws-serverless
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore2.1
  tags:
    Project: aws-serverless
  stackTags:
    Project: aws-serverless

  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'} # get stage from cli parameter, or default to 'dev'
  # region: us-east-1
  region: ${self:provider.environment.Region} # get region from stage settings

  # you can add statements to the Lambda function's IAM Role here
  environment: ${file(./env.yml):${self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "s3:PutObject"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ReportS3" }, "/*" ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

package:
  individually: true

functions:
  generate:
    handler: Services::Services.Features.Report.ReportHandler::Generate
    description: Generate all reports upload files and metadata to S3
    memorySize: 128
    timeout: 30
    # you can add packaging information here
    package:
      artifact: Services/Services/bin/release/netcoreapp2.1/Services.zip
    #  exclude:
    #    - exclude-me.js
    #    - exclude-me-dir/**
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
      - schedule: ${self:provider.environment.ReportCronJob}
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

  email:
    handler: Services::Services.Features.Email.EmailHandler::Handler
    description: Customise signup email
    memorySize: 256
    package:
      artifact: Services/Services/bin/release/netcoreapp2.1/Services.zip

# you can add CloudFormation resource templates here
resources:
  Resources:
    
    ### S3 bucket to store reports access logs
    ReportS3Logs:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: aws-serverless-report-logs-${self:provider.stage}
        AccessControl: LogDeliveryWrite

    ### S3 bucket to store generated reports
    ReportS3:
      Type: AWS::S3::Bucket
      DependsOn: ReportS3Logs
      Properties:
        BucketName: aws-serverless-report-${self:provider.stage}
        LoggingConfiguration:
          DestinationBucketName: aws-serverless-report-logs-${self:provider.stage}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              ExposedHeaders:
                - x-amz-meta-name
                - x-amz-meta-site
                - x-amz-meta-path
              MaxAge: 3000
    
    ### S3 bucket to store web site assets
    SiteS3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.SiteBucket}
    
    ### S3 bucket policy to grant CloudFront identity access
    SiteS3Policy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: SiteS3
        PolicyDocument:
          Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource:
              'arn:aws:s3:::${self:provider.environment.SiteBucket}/*'
            Principal:
              CanonicalUser:
                Fn::GetAtt: [CustomerPortalOriginAccessIdentity, S3CanonicalUserId]
    
    ### Identity S3 -> CDN
    CustomerPortalOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties: 
        CloudFrontOriginAccessIdentityConfig: 
          Comment: ${self:provider.environment.SiteBucket}-identity

    ### CloudFront distribution (these changes are slooow)
    CustomerPortalDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn: CustomerPortalOriginAccessIdentity
      Properties:
        DistributionConfig:
          DefaultRootObject: index.html
          Enabled: true
          PriceClass: PriceClass_All
          # ViewerCertificate:
          #   AcmCertificateArn: 'arn:aws:acm:us-east-1:444444444444:certificate/3bb1df4b-cc11-44e5-8d3c-873220dad0b0'
          #   SslSupportMethod: sni-only
          #   MinimumProtocolVersion: TLSv1
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            TargetOriginId: ${self:provider.environment.SiteBucket}-origin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          # Aliases:
          # - ${self:provider.environment.SiteUri}
          Origins:
          - DomainName: ${self:provider.environment.SiteBucket}.s3.amazonaws.com
            Id: ${self:provider.environment.SiteBucket}-origin
            S3OriginConfig:
              OriginAccessIdentity: 
                Fn::Join:
                  - ''
                  - - 'origin-access-identity/cloudfront/'
                    - Ref: CustomerPortalOriginAccessIdentity
          CustomErrorResponses:
          - ErrorCode: '403'
            ResponsePagePath: "/index.html"
            ResponseCode: '200'
            ErrorCachingMinTTL: '30'
          - ErrorCode: '404'
            ResponsePagePath: "/index.html"
            ResponseCode: '200'
            ErrorCachingMinTTL: '30'

    ### Cognito User Pool
    CustomerPortalCognitoUserPool:
      Type: AWS::Cognito::UserPool
      UpdateReplacePolicy: Retain
      Properties: 
        AdminCreateUserConfig: 
          InviteMessageTemplate: 
            EmailMessage: 'Hi<BR /><BR />You have been invited to access the Customer Portal<BR /><BR />Your username is {username} and temporary password is {####}<BR /><BR />Please login and reset your password at https://ab/login'
            EmailSubject: 'Your Customer Portal account invitation'
            SMSMessage: 'Your username is {username} and temporary password is {####}.'
        AutoVerifiedAttributes:
          - email
        # EmailConfiguration:
        #   EmailSendingAccount: DEVELOPER
        #   ReplyToEmailAddress: no-reply@ab.com.au
        #   SourceArn: arn:aws:ses:us-east-1:444444444444:identity/no-reply@ab.com.au
        MfaConfiguration: OFF
        Policies: 
          PasswordPolicy: 
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        Schema: 
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
          - AttributeDataType: String
            Mutable: true
            Name: company
          - AttributeDataType: String
            Mutable: true
            Name: account_manager
          - AttributeDataType: String
            Mutable: true
            Name: site
        UsernameAttributes: 
          - email
        UserPoolName: customer-portal-userpool-${self:provider.stage}
        LambdaConfig:
          CustomMessage:
            Fn::GetAtt: [EmailLambdaFunction, Arn]

    ### Cognito User Pool Client
    CustomPortalCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn: CustomerPortalCognitoUserPool
      Properties: 
        ClientName: customer-portal-userpool-${self:provider.stage}-client
        ExplicitAuthFlows: 
          - USER_PASSWORD_AUTH
        GenerateSecret: false
        RefreshTokenValidity: 30
        SupportedIdentityProviders: 
          - COGNITO
        UserPoolId: 
          Ref: CustomerPortalCognitoUserPool
        WriteAttributes: 
          - email
          - family_name
          - given_name
          - "custom:company"
          - "custom:account_manager"
          - "custom:site"

    ### Cognito User Pool Group
    CustomerPortalCognitoUserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: admin
        RoleArn:
          Fn::GetAtt: [CustomerPortalAdminAuthRole, Arn]
        UserPoolId:
          Ref: CustomerPortalCognitoUserPool

    ### Cognito Identity Pool
    CustomerPortalIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: customer_identitypool_${self:provider.stage}
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: CustomPortalCognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CustomerPortalCognitoUserPool, ProviderName]

    ### Attach roles to Cognito Identity Pool
    CustomerPortalIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CustomerPortalIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CustomerPortalAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CustomerPortalUnauthRole, Arn]
        RoleMappings: !GetAtt IdentityPoolRoleAttachmentMapping.RoleMappings

    ### Transform to map with dynamic keys
    IdentityPoolRoleAttachmentMapping:
      Type: Custom::DynamicMapTransform
      Properties:
        ServiceToken:
          Fn::GetAtt: [DynamicMapTransformLambda, Arn]
        AttributeName: RoleMappings
        Entries:
          - Key:
              Fn::Join:
                - ':'
                - - Fn::GetAtt: [CustomerPortalCognitoUserPool, ProviderName]
                  - Ref: CustomPortalCognitoUserPoolClient
            Value:
              Type: Token
              AmbiguousRoleResolution: AuthenticatedRole

    # IAM role authenticated users
    CustomerPortalAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: 'customer-portal-user-pool-auth-${self:provider.stage}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CustomerPortalIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'CustomerPortalAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:Get*'
                  Resource: { "Fn::Join": ["", [ { Fn::GetAtt: [ReportS3, Arn] }, "*" ] ] }
                - Effect: Allow
                  Action:
                    - 'dynamodb:Scan'
                    - 'dynamodb:Query'
                  Resource:
                    Fn::GetAtt: [ProductsTable, Arn]
                - Effect: Allow
                  Action:
                    - 'cognito-sync:*'
                    - 'iam:ListRoles'
                    - 'iam:ListOpenIdConnectProviders'
                    - 'sns:ListPlatformApplications'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'iam:CreateServiceLinkedRole'
                  Resource: '*'
                  Condition:
                    StringEquals:
                      iam:AWSServiceName: email.cognito-idp.amazonaws.com
                - Effect: Allow
                  Action:
                    - 'iam:DeleteServiceLinkedRole'
                    - 'iam:GetServiceLinkedRoleDeletionStatus'
                  Resource: arn:aws:iam::*:role/aws-service-role/email.cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdpEmail*

    # IAM role unauthenticated users
    CustomerPortalUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: 'customer-portal-user-pool-unauth-${self:provider.stage}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Deny
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'

    ### IAM role for (authenticated) admin users
    CustomerPortalAdminAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: 'customer-portal-user-pool-admin-${self:provider.stage}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CustomerPortalIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'CustomerPortalAdminPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:Get*'
                    - 's3:List*'
                  Resource: { "Fn::Join": ["", [ { Fn::GetAtt: [ReportS3, Arn] }, "*" ] ] }
                - Effect: Allow
                  Action:
                    - 'dynamodb:Scan'
                    - 'dynamodb:Query'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:UpdateItem'
                    - 'dynamodb:BatchWriteItem'
                  Resource:
                    Fn::GetAtt: [ProductsTable, Arn]
                - Effect: Allow
                  Action:
                    - 'lambda:InvokeFunction'
                  Resource:
                    Fn::GetAtt: [GenerateLambdaFunction, Arn]
                - Effect: Allow
                  Action:
                    - 'cognito-idp:*'
                  Resource:
                    Fn::GetAtt: [CustomerPortalCognitoUserPool, Arn]

    ### DynamoDB table
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: customer-portal-products-${self:provider.stage}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        SSESpecification:
          SSEEnabled: 'true'

    ### Permission to let Cognito invoke lambda function
    OnCognitoTriggerPermission:
      Type: 'AWS::Lambda::Permission'
      DependsOn:
        - CustomerPortalCognitoUserPool
        - EmailLambdaFunction
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName:
          Ref: EmailLambdaFunction
        Principal: "cognito-idp.amazonaws.com"
        SourceArn:
          Fn::GetAtt: [CustomerPortalCognitoUserPool, Arn]

    ### Dynamic map helper function
    # https://forums.aws.amazon.com/thread.jspa?threadID=255584&tstart=0
    DynamicMapTransformLambda:
      Type: AWS::Lambda::Function
      Properties:
        Description: Transform to generate maps with computed keys
        Handler: index.handler
        Role: !GetAtt IamRoleLambdaExecution.Arn
        Runtime: nodejs12.x
        Code:
          ZipFile: |
            const { send, SUCCESS, ERROR } = require('cfn-response');
            exports.handler = (event, context, callback) => {
              console.log(JSON.stringify(event, null, 2));
              const { RequestType, ResourceProperties: props = { } } = event;
              const { Entries: entries = [ ], AttributeName: attName } = props;
              const r = RequestType === 'Delete' ? undefined : {[attName]: entries.reduce((r, {Key, Value}) => (r[Key] = Value, r),{})};
              send(event, context, SUCCESS, r);
            };

  ### Generate outputs for the stack, so that they can be filled into web app easily
  Outputs:
    CustomerPortalCognitoUserPoolId:
      Description: userPoolId for web app
      Value:
        Ref: CustomerPortalCognitoUserPool
    CustomPortalCognitoUserPoolClientId:
      Description: userPoolWebClientId for web app
      Value:
        Ref: CustomPortalCognitoUserPoolClient
    CustomerPortalIdentityPoolId:
      Description: identityPoolId for web app
      Value:
        Ref: CustomerPortalIdentityPool
    SiteS3Url:
      Description: S3 bucket URL for web app
      Value:
        Fn::GetAtt: [SiteS3, WebsiteURL]
    CustomerPortalDistributionDomainName:
      Description: CDN domain for web app
      Value:
        Fn::GetAtt: [CustomerPortalDistribution, DomainName]

plugins:
  - serverless-finch

custom:
  client:
    bucketName: ${self:provider.environment.SiteBucket}
    distributionFolder: ./Web/dist/CustomerPortal
    indexDocument: index.html
    errorDocument: index.html